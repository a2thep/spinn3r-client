3.0.54

* Implemented new protocol buffer encoding for the API.  This has a performance
  advantage (about 10x) in that we're not performing multiple
  decompression/compression rounds on our content. followed by charset encoding
  changes on both the server and the client.  Now the client just sends the data
  as a protocol buffer with compressed fields.

* XML End-Of-Line handling is not enabled for protocol buffers.  We decided to
  go down the path of preserving correctness and performance.

  This is documented in section 2.10 of the XML 1.0 standard:

  http://www.w3.org/TR/REC-xml/#sec-line-ends
  
    "XML parsed entities are often stored in computer files which, for editing
    convenience, are organized into lines. These lines are typically separated
    by some combination of the characters CARRIAGE RETURN (#xD) and LINE FEED
    (#xA)."

    "To simplify the tasks of applications, the XML processor MUST behave as if
    it normalized all line breaks in external parsed entities (including the
    document entity) on input, before parsing, by translating both the
    two-character sequence #xD #xA and any #xD that is not followed by #xA to a
    single #xA character."

  If clients report that they need this functionality it will be enabled in a
  later version of the reference API.  The only downside is that there will be a
  slight performance impact with decoding end of lines on the client.

* Characters previously removed from the stream due to XML encoding rules are
  now enabled.  This is done for performance and correctness reasons.
  Previously only the following characters were enabled:

    Section 2.2 of the XML spec describes which Unicode code points
    are valid in XML:

    #x9 | #xA | #xD | [#x20-#xD7FF] |  [#xE000-#xFFFD] | [#x10000-#x10FFFF]
  
* Removed spam probability filters from the API as this could result in a denial
  of service.  This will be added in when server-side filtering is re-enabled in
  a more recent version.

* Two new jars are needed to use Spinn3r with protocol buffers:

    lib/jzlib-1.0.7.jar (used for gzip decompression)
    lib/protobuf-java-2.0.3.jar (protocol buffer support)

* fixed feedURL to be the link value and not the resouce. Added a api
  methoud to expoce the recouse so that the old incorrect value is also
  exposed so that clients that depend on the old broken behavor can
  still be made to work.
